/* 
    数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。
    每当爬上一个阶梯都要花费对应的体力值，一旦支付了相应的体力值，就可以选择向上爬一个阶梯或者爬两个阶梯。
    请找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。

    示例 1：

    输入：cost = [10, 15, 20]
    输出：15
    解释：最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。

    示例 2：

    输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
    输出：6
    解释：最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。
     

    提示：

    2 <= cost.length <= 1000
    0 <= cost[i] <= 999
  */
/* 
    首先说人话分析脑残出题人的题目意思：（转力扣评论区）
    体力值  10  15  20    
    水平线   0   1   2  天台

    一次最多可以跨两步。cost[i]为离开当前台阶需要的体力，水平线出发不花体力。
    如果离开水平线跨1步到了0级，耗费体力为0；然后离开0级跨一步或两步都是10体力，如果跨到2级，这时还没到天台，还要跨一步离开2级要20体力。所以共需要30体力。
    如果一开始跨2步直接到1级，花费0体力，然后离开1级跨两步直接上天台，花费15体力。所以共需要15体力
 */
/**
 * @param {number[]} cost
 * @return {number}
 */
 var minCostClimbingStairs = function(cost) {
    return 
};